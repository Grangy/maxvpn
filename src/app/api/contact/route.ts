import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { telegram, email, phone, message, plan } = body;
    
    console.log('Contact form data:', { telegram, email, phone, message, plan });

    // Validate required fields
    if (!telegram) {
      return NextResponse.json(
        { error: 'Telegram –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // Prepare message for Telegram
    const telegramMessage = `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ MaxVPN

üì± Telegram: ${telegram}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìã –¢–∞—Ä–∏—Ñ: ${plan || '–ù–µ –≤—ã–±—Ä–∞–Ω'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `.trim();

    // Check if Telegram is configured
    if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
      console.log('Telegram not configured, skipping notification');
      return NextResponse.json(
        { message: '–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ (Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)' },
        { status: 200 }
      );
    }

    // Send to Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'HTML',
        }),
      }
    );

    if (!telegramResponse.ok) {
      console.error('Telegram API error:', await telegramResponse.text());
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' },
      { status: 200 }
    );

  } catch (error) {
    console.error('Contact form error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
